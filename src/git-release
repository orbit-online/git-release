#!/usr/bin/env bash

set -e
DRY_RUN=false

main() {
  DOC="git-release - Tag REF by either bumping the last version or specifying one
Usage:
  git-release [-dnh] previous [REF]
  git-release [options] (major|minor|patch) [REF]
  git-release [options] VERSION [REF]

Options:
  --ignore-dirty  Ignore a dirty working copy when REF is HEAD
  -d, --debug     Turn on bash -x
  -n, --dry-run   Show the commands instead of running them and show changelog
  -h, --help      Show this screen

Notes:
  git-release automatically determines the previous version using git-describe
  and then bumps the specified part of that version.
  Use \`git-release previous' to show the previous version based on REF.
  REF defaults to HEAD.
"
# docopt parser below, refresh this parser with `docopt.sh git-release`
# shellcheck disable=2016,1075
docopt() { parse() { if ${DOCOPT_DOC_CHECK:-true}; then local doc_hash
if doc_hash=$(printf "%s" "$DOC" | (sha256sum 2>/dev/null || shasum -a 256)); then
if [[ ${doc_hash:0:5} != "$digest" ]]; then
stderr "The current usage doc (${doc_hash:0:5}) does not match \
what the parser was generated with (${digest})
Run \`docopt.sh\` to refresh the parser."; _return 70; fi; fi; fi
local root_idx=$1; shift; argv=("$@"); parsed_params=(); parsed_values=()
left=(); testdepth=0; local arg; while [[ ${#argv[@]} -gt 0 ]]; do
if [[ ${argv[0]} = "--" ]]; then for arg in "${argv[@]}"; do
parsed_params+=('a'); parsed_values+=("$arg"); done; break
elif [[ ${argv[0]} = --* ]]; then parse_long
elif [[ ${argv[0]} = -* && ${argv[0]} != "-" ]]; then parse_shorts
elif ${DOCOPT_OPTIONS_FIRST:-false}; then for arg in "${argv[@]}"; do
parsed_params+=('a'); parsed_values+=("$arg"); done; break; else
parsed_params+=('a'); parsed_values+=("${argv[0]}"); argv=("${argv[@]:1}"); fi
done; local idx; if ${DOCOPT_ADD_HELP:-true}; then
for idx in "${parsed_params[@]}"; do [[ $idx = 'a' ]] && continue
if [[ ${shorts[$idx]} = "-h" || ${longs[$idx]} = "--help" ]]; then
stdout "$trimmed_doc"; _return 0; fi; done; fi
if [[ ${DOCOPT_PROGRAM_VERSION:-false} != 'false' ]]; then
for idx in "${parsed_params[@]}"; do [[ $idx = 'a' ]] && continue
if [[ ${longs[$idx]} = "--version" ]]; then stdout "$DOCOPT_PROGRAM_VERSION"
_return 0; fi; done; fi; local i=0; while [[ $i -lt ${#parsed_params[@]} ]]; do
left+=("$i"); ((i++)) || true; done
if ! required "$root_idx" || [ ${#left[@]} -gt 0 ]; then error; fi; return 0; }
parse_shorts() { local token=${argv[0]}; local value; argv=("${argv[@]:1}")
[[ $token = -* && $token != --* ]] || _return 88; local remaining=${token#-}
while [[ -n $remaining ]]; do local short="-${remaining:0:1}"
remaining="${remaining:1}"; local i=0; local similar=(); local match=false
for o in "${shorts[@]}"; do if [[ $o = "$short" ]]; then similar+=("$short")
[[ $match = false ]] && match=$i; fi; ((i++)) || true; done
if [[ ${#similar[@]} -gt 1 ]]; then
error "${short} is specified ambiguously ${#similar[@]} times"
elif [[ ${#similar[@]} -lt 1 ]]; then match=${#shorts[@]}; value=true
shorts+=("$short"); longs+=(''); argcounts+=(0); else value=false
if [[ ${argcounts[$match]} -ne 0 ]]; then if [[ $remaining = '' ]]; then
if [[ ${#argv[@]} -eq 0 || ${argv[0]} = '--' ]]; then
error "${short} requires argument"; fi; value=${argv[0]}; argv=("${argv[@]:1}")
else value=$remaining; remaining=''; fi; fi; if [[ $value = false ]]; then
value=true; fi; fi; parsed_params+=("$match"); parsed_values+=("$value"); done
}; parse_long() { local token=${argv[0]}; local long=${token%%=*}
local value=${token#*=}; local argcount; argv=("${argv[@]:1}")
[[ $token = --* ]] || _return 88; if [[ $token = *=* ]]; then eq='='; else eq=''
value=false; fi; local i=0; local similar=(); local match=false
for o in "${longs[@]}"; do if [[ $o = "$long" ]]; then similar+=("$long")
[[ $match = false ]] && match=$i; fi; ((i++)) || true; done
if [[ $match = false ]]; then i=0; for o in "${longs[@]}"; do
if [[ $o = $long* ]]; then similar+=("$long"); [[ $match = false ]] && match=$i
fi; ((i++)) || true; done; fi; if [[ ${#similar[@]} -gt 1 ]]; then
error "${long} is not a unique prefix: ${similar[*]}?"
elif [[ ${#similar[@]} -lt 1 ]]; then
[[ $eq = '=' ]] && argcount=1 || argcount=0; match=${#shorts[@]}
[[ $argcount -eq 0 ]] && value=true; shorts+=(''); longs+=("$long")
argcounts+=("$argcount"); else if [[ ${argcounts[$match]} -eq 0 ]]; then
if [[ $value != false ]]; then
error "${longs[$match]} must not have an argument"; fi
elif [[ $value = false ]]; then
if [[ ${#argv[@]} -eq 0 || ${argv[0]} = '--' ]]; then
error "${long} requires argument"; fi; value=${argv[0]}; argv=("${argv[@]:1}")
fi; if [[ $value = false ]]; then value=true; fi; fi; parsed_params+=("$match")
parsed_values+=("$value"); }; required() { local initial_left=("${left[@]}")
local node_idx; ((testdepth++)) || true; for node_idx in "$@"; do
if ! "node_$node_idx"; then left=("${initial_left[@]}"); ((testdepth--)) || true
return 1; fi; done; if [[ $((--testdepth)) -eq 0 ]]; then
left=("${initial_left[@]}"); for node_idx in "$@"; do "node_$node_idx"; done; fi
return 0; }; either() { local initial_left=("${left[@]}"); local best_match_idx
local match_count; local node_idx; ((testdepth++)) || true
for node_idx in "$@"; do if "node_$node_idx"; then
if [[ -z $match_count || ${#left[@]} -lt $match_count ]]; then
best_match_idx=$node_idx; match_count=${#left[@]}; fi; fi
left=("${initial_left[@]}"); done; ((testdepth--)) || true
if [[ -n $best_match_idx ]]; then "node_$best_match_idx"; return 0; fi
left=("${initial_left[@]}"); return 1; }; optional() { local node_idx
for node_idx in "$@"; do "node_$node_idx"; done; return 0; }; _command() {
local i; local name=${2:-$1}; for i in "${!left[@]}"; do local l=${left[$i]}
if [[ ${parsed_params[$l]} = 'a' ]]; then
if [[ ${parsed_values[$l]} != "$name" ]]; then return 1; fi
left=("${left[@]:0:$i}" "${left[@]:((i+1))}")
[[ $testdepth -gt 0 ]] && return 0; if [[ $3 = true ]]; then
eval "((var_$1++)) || true"; else eval "var_$1=true"; fi; return 0; fi; done
return 1; }; switch() { local i; for i in "${!left[@]}"; do local l=${left[$i]}
if [[ ${parsed_params[$l]} = "$2" ]]; then
left=("${left[@]:0:$i}" "${left[@]:((i+1))}")
[[ $testdepth -gt 0 ]] && return 0; if [[ $3 = true ]]; then
eval "((var_$1++))" || true; else eval "var_$1=true"; fi; return 0; fi; done
return 1; }; value() { local i; for i in "${!left[@]}"; do local l=${left[$i]}
if [[ ${parsed_params[$l]} = "$2" ]]; then
left=("${left[@]:0:$i}" "${left[@]:((i+1))}")
[[ $testdepth -gt 0 ]] && return 0; local value
value=$(printf -- "%q" "${parsed_values[$l]}"); if [[ $3 = true ]]; then
eval "var_$1+=($value)"; else eval "var_$1=$value"; fi; return 0; fi; done
return 1; }; stdout() { printf -- "cat <<'EOM'\n%s\nEOM\n" "$1"; }; stderr() {
printf -- "cat <<'EOM' >&2\n%s\nEOM\n" "$1"; }; error() {
[[ -n $1 ]] && stderr "$1"; stderr "$usage"; _return 1; }; _return() {
printf -- "exit %d\n" "$1"; exit "$1"; }; set -e; trimmed_doc=${DOC:0:662}
usage=${DOC:75:130}; digest=468c4; shorts=(-d -n -h '')
longs=(--debug --dry-run --help --ignore-dirty); argcounts=(0 0 0 0); node_0(){
switch __debug 0; }; node_1(){ switch __dry_run 1; }; node_2(){ switch __help 2
}; node_3(){ switch __ignore_dirty 3; }; node_4(){ value REF a; }; node_5(){
value VERSION a; }; node_6(){ _command previous; }; node_7(){ _command major; }
node_8(){ _command minor; }; node_9(){ _command patch; }; node_10(){
optional 0 1 2; }; node_11(){ optional 4; }; node_12(){ required 10 6 11; }
node_13(){ optional 3; }; node_14(){ optional 13; }; node_15(){ either 7 8 9; }
node_16(){ required 15; }; node_17(){ required 14 16 11; }; node_18(){
required 14 5 11; }; node_19(){ either 12 17 18; }; node_20(){ required 19; }
cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2
printf "%s\n" "${DOC:75:130}" >&2; exit 1; }'; unset var___debug var___dry_run \
var___help var___ignore_dirty var_REF var_VERSION var_previous var_major \
var_minor var_patch; parse 20 "$@"; local prefix=${DOCOPT_PREFIX:-''}
unset "${prefix}__debug" "${prefix}__dry_run" "${prefix}__help" \
"${prefix}__ignore_dirty" "${prefix}REF" "${prefix}VERSION" \
"${prefix}previous" "${prefix}major" "${prefix}minor" "${prefix}patch"
eval "${prefix}"'__debug=${var___debug:-false}'
eval "${prefix}"'__dry_run=${var___dry_run:-false}'
eval "${prefix}"'__help=${var___help:-false}'
eval "${prefix}"'__ignore_dirty=${var___ignore_dirty:-false}'
eval "${prefix}"'REF=${var_REF:-}'; eval "${prefix}"'VERSION=${var_VERSION:-}'
eval "${prefix}"'previous=${var_previous:-false}'
eval "${prefix}"'major=${var_major:-false}'
eval "${prefix}"'minor=${var_minor:-false}'
eval "${prefix}"'patch=${var_patch:-false}'; local docopt_i=1
[[ $BASH_VERSION =~ ^4.3 ]] && docopt_i=2; for ((;docopt_i>0;docopt_i--)); do
declare -p "${prefix}__debug" "${prefix}__dry_run" "${prefix}__help" \
"${prefix}__ignore_dirty" "${prefix}REF" "${prefix}VERSION" \
"${prefix}previous" "${prefix}major" "${prefix}minor" "${prefix}patch"; done; }
# docopt parser above, complete command for generating this parser is `docopt.sh git-release`
  eval "$(docopt "$@")"

  # shellcheck disable=2154
  if $__debug; then
    set -x
  fi
  # shellcheck disable=2154
  DRY_RUN=$__dry_run

  # shellcheck disable=2154
  if [[ -z $REF ]]; then
    REF=HEAD
  fi

  local _v v_major v_minor v_patch _rest previous_version
  if ! previous_version=$(git describe --tag --abbrev=0 --match='v*' "$REF" 2>/dev/null); then
    v_major=0
    v_minor=0
    v_patch=0
  else
    # shellcheck disable=2034
    IFS=v.-+ read -r -d $'\n' _v v_major v_minor v_patch _rest <<<"$previous_version"
  fi

  # shellcheck disable=2154
  if $previous; then
    if [[ -n $previous_version ]]; then
      printf -- "%s\n" "$previous_version"
      return 0
    else
      printf -- "No version tag found based on %s\n" "$REF" >&2
      return 1
    fi
  fi

  local new_version
  # shellcheck disable=2154
  if $major || $minor || $patch; then
    if $major || $minor; then
      if $major; then
        v_major=$((v_major+1))
        v_minor=0
      else
        v_minor=$((v_minor+1))
      fi
      v_patch=0
    else
      v_patch=$((v_patch+1))
    fi
    new_version=$(printf -- "v%s.%s.%s\n" "$v_major" "$v_minor" "$v_patch")
  else
    new_version=v${VERSION#v}
    if [[ ! $new_version =~ ^v[0-9]+\.[0-9]+\.[0-9]+([+-].+)?$ ]]; then
      docopt_exit "\`$VERSION' is not in semver format."
    fi
  fi

  # shellcheck disable=2154
  if [[ $REF = HEAD ]] && ! $__ignore_dirty && (! git diff --no-ext-diff --quiet --exit-code || ! git diff-index --quiet --cached HEAD 2>/dev/null); then
    printf "Working copy is dirty, refusing to release\n" >&2
    return 1
  fi

  local release_notes
  if [[ -n $previous_version ]]; then
    release_notes="# Release notes were prepared for you, categorize/remove the changes as you see fit.
$new_version
------

Changes since $previous_version:
$(git rev-list --format=%s "$REF...$previous_version" | grep -Pv '^commit ' | sed 's/^/* /g')
"
  else
    release_notes="# Release notes were prepared for you, describe the first release.
$new_version
------

Initial release.
"
  fi
  local tag_msg_file
  tag_msg_file=$(git rev-parse --git-dir)/TAG_EDITMSG

  local ret=0
  if $DRY_RUN; then
    #shellcheck disable=2028
    echo printf -- \"%s\\n\" "\"$release_notes\"" \> "\"$tag_msg_file\""
    # printf -- "###### Release notes ######\n%s\n###########################\n" "$release_notes"
    echo git tag -e -F "$tag_msg_file" "$new_version" "$REF"
  else
    printf -- "%s\n" "$release_notes" > "$tag_msg_file"
    if ! git tag -e -F "$tag_msg_file" "$new_version" "$REF"; then
      # shellcheck disable=2183
      printf -- "Unable to tag %s with %s, the version might already exist on a different branch.
You can list all versions with \`git tag -l --sort taggerdate 'v*'' and then tag manually with \`git tag -e -F %s %s %s'\n" "$REF" "$new_version" "$tag_msg_file" "$new_version" "$REF" >&2
      ret=1
    else
      printf -- "%s tagged with %s\n" "$REF" "$new_version" >&2
    fi
  fi

  local branch push_cmd="git push $new_version"
  if branch=$(git symbolic-ref --short "$REF" 2>/dev/null); then
    local upstream
    upstream=$(git config "branch.$branch.remote" 2>/dev/null)
    push_cmd="git push --atomic $upstream $branch $new_version"
  fi
  printf -- "Release the new version by running \`%s'\n" "$push_cmd" >&2
  return $ret
}

main "$@"
